require 'prime'
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# 
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

# N = 5
N = 500

# the sum of all the numbers up to n
# eg, 7th triangle number: 1+2+3+4+5+6+7=28
def nth_triangle_number n
  counter = 0
  (0..n).each { |i| counter += i }
  counter
end

# find all the numbers which can divide (whole) into n
# eg, 28: 1,2,4,7,14,28
def get_divisers_of n
  divisers = [1.0, n.to_f] # start with 1 and n, they will always be there!
  (2..(n/2).floor).map(&:to_f).each do |x| # only need to check numbers as high as half of n
    next if divisers.include?(x)
    a = (n / x)
    next if divisers.include?(a)
    if is_whole?(a)
      divisers << a
      divisers << x
    end
  end
  divisers
end

def is_whole? n
  n == n.abs.to_i
end

def run
  counter = 2
  while factors_of(nth_triangle_number(counter)).length <= N
    counter += 1
  end
  puts nth_triangle_number(counter)
end

# puts get_divisers_of(nth_triangle_number(4800)).length

def factors_of number
  primes, powers = number.prime_division.transpose
  exponents = powers.map{|i| (0..i).to_a}
  divisors = exponents.shift.product(*exponents).map do |powers|
    primes.zip(powers).map{|prime, power| prime ** power}.inject(:*)
  end
  divisors.sort.map{|div| [div, number / div]}
end

# puts factors_of(nth_triangle_number(7)).length
run